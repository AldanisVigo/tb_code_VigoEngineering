// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package lib

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEc607727DecodeFunctionFunctions(in *jlexer.Lexer, out *UserRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UUID":
			out.UUID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEc607727EncodeFunctionFunctions(out *jwriter.Writer, in UserRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UUID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UUID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEc607727EncodeFunctionFunctions(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEc607727EncodeFunctionFunctions(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEc607727DecodeFunctionFunctions(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEc607727DecodeFunctionFunctions(l, v)
}
func easyjsonEc607727DecodeFunctionFunctions1(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UUID":
			out.UUID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEc607727EncodeFunctionFunctions1(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UUID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UUID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEc607727EncodeFunctionFunctions1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEc607727EncodeFunctionFunctions1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEc607727DecodeFunctionFunctions1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEc607727DecodeFunctionFunctions1(l, v)
}
func easyjsonEc607727DecodeFunctionFunctions2(in *jlexer.Lexer, out *FileUploadRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UUID":
			out.UUID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEc607727EncodeFunctionFunctions2(out *jwriter.Writer, in FileUploadRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UUID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UUID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileUploadRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEc607727EncodeFunctionFunctions2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileUploadRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEc607727EncodeFunctionFunctions2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileUploadRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEc607727DecodeFunctionFunctions2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileUploadRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEc607727DecodeFunctionFunctions2(l, v)
}
func easyjsonEc607727DecodeFunctionFunctions3(in *jlexer.Lexer, out *FileRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UUID":
			out.UUID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEc607727EncodeFunctionFunctions3(out *jwriter.Writer, in FileRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UUID\":"
		out.RawString(prefix[1:])
		out.String(string(in.UUID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEc607727EncodeFunctionFunctions3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEc607727EncodeFunctionFunctions3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEc607727DecodeFunctionFunctions3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEc607727DecodeFunctionFunctions3(l, v)
}
